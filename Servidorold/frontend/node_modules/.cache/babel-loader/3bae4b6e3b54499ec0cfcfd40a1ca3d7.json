{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projetos\\\\ProjetoCasa\\\\frontend\\\\src\\\\withAuth.js\";\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport axios from 'axios'; //It will take a component we want to protect\n//The users cant access it unless they are logged in\n\nexport default function withAuth(ComponentToProtect) {\n  return class extends Component {\n    constructor() {\n      super();\n      this.state = {\n        loading: true,\n        redirect: false\n      };\n    }\n\n    componentDidMount() {\n      //GET message from server using fetch api\n      axios.get('http://localhost:3000/checkToken', {\n        withCredentials: true\n      }).then(res => {\n        console.log('checkToken status =', res.status);\n\n        if (res.status === 200) {\n          this.setState({\n            loading: false\n          });\n        } else {\n          const error = new Error(res.error);\n          throw error;\n        }\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          loading: false,\n          redirect: true\n        });\n      });\n    }\n\n    render() {\n      const {\n        loading,\n        redirect\n      } = this.state;\n\n      if (loading) {\n        return null;\n      }\n\n      if (redirect) {\n        return /*#__PURE__*/React.createElement(Redirect, {\n          to: \"/login\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 20\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(ComponentToProtect, Object.assign({}, this.props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 16\n        }\n      }));\n    }\n\n  };\n}","map":{"version":3,"sources":["C:/Projetos/ProjetoCasa/frontend/src/withAuth.js"],"names":["React","Component","Redirect","axios","withAuth","ComponentToProtect","constructor","state","loading","redirect","componentDidMount","get","withCredentials","then","res","console","log","status","setState","error","Error","catch","err","render","props"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;AACA;;AACA,eAAe,SAASC,QAAT,CAAkBC,kBAAlB,EAAsC;AACjD,SAAO,cAAcJ,SAAd,CAAwB;AAC3BK,IAAAA,WAAW,GAAG;AACV;AACA,WAAKC,KAAL,GAAa;AACTC,QAAAA,OAAO,EAAE,IADA;AAETC,QAAAA,QAAQ,EAAE;AAFD,OAAb;AAIH;;AAEDC,IAAAA,iBAAiB,GAAG;AAClB;AACAP,MAAAA,KAAK,CAACQ,GAAN,CAAU,kCAAV,EAA8C;AAC5CC,QAAAA,eAAe,EAAE;AAD2B,OAA9C,EAEKC,IAFL,CAEUC,GAAG,IAAG;AACVC,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,GAAG,CAACG,MAAvC;;AACA,YAAIH,GAAG,CAACG,MAAJ,KAAe,GAAnB,EAAwB;AACxB,eAAKC,QAAL,CAAc;AAACV,YAAAA,OAAO,EAAE;AAAV,WAAd;AACD,SAFC,MAEK;AACL,gBAAMW,KAAK,GAAG,IAAIC,KAAJ,CAAUN,GAAG,CAACK,KAAd,CAAd;AACA,gBAAMA,KAAN;AACC;AACF,OAVL,EAWKE,KAXL,CAWYC,GAAG,IAAI;AACbP,QAAAA,OAAO,CAACI,KAAR,CAAcG,GAAd;AACA,aAAKJ,QAAL,CAAc;AAACV,UAAAA,OAAO,EAAE,KAAV;AAAiBC,UAAAA,QAAQ,EAAE;AAA3B,SAAd;AACD,OAdL;AAeL;;AACDc,IAAAA,MAAM,GAAG;AACL,YAAM;AAAEf,QAAAA,OAAF;AAAWC,QAAAA;AAAX,UAAwB,KAAKF,KAAnC;;AACA,UAAIC,OAAJ,EAAa;AACT,eAAO,IAAP;AACH;;AACD,UAAIC,QAAJ,EAAc;AACV,4BAAO,oBAAC,QAAD;AAAU,UAAA,EAAE,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;;AACD,0BAAO,oBAAC,kBAAD,oBAAwB,KAAKe,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;AApC4B,GAA/B;AAsCH","sourcesContent":["import React, {Component} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\n//It will take a component we want to protect\r\n//The users cant access it unless they are logged in\r\nexport default function withAuth(ComponentToProtect) {\r\n    return class extends Component {\r\n        constructor() {\r\n            super();\r\n            this.state = {\r\n                loading: true,\r\n                redirect: false,\r\n            };\r\n        }\r\n\r\n        componentDidMount() {\r\n          //GET message from server using fetch api\r\n          axios.get('http://localhost:3000/checkToken', {\r\n            withCredentials: true})          \r\n              .then(res=> {\r\n                console.log('checkToken status =', res.status)\r\n                if (res.status === 200) {\r\n                this.setState({loading: false});\r\n              } else {\r\n                const error = new Error(res.error);\r\n                throw error;\r\n                }\r\n              })\r\n              .catch (err => {\r\n                console.error(err);\r\n                this.setState({loading: false, redirect: true})\r\n              }); \r\n    }\r\n    render() {\r\n        const { loading, redirect } = this.state;\r\n        if (loading) {\r\n            return null;\r\n        }\r\n        if (redirect) {\r\n            return <Redirect to=\"/login\" />;\r\n        }\r\n        return <ComponentToProtect {...this.props} />;\r\n      }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}